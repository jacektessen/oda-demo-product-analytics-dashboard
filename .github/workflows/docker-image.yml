name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    env:
      REDIS_PORT: 6379
      REDIS_URL: "redis://redis:6379"
      FASTAPI_PORT: 8060
      FASTAPI_INTERNAL_URL: "http://api-service:8060"
      FASTAPI_EXTERNAL_URL: "http://localhost:8060"
      NEXTJS_PORT: 3060
      NEXT_PUBLIC_API_URL: "http://localhost:8060/api"
      ODA_API_BASE_URL: "${{ secrets.ODA_API_BASE_URL }}"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        working-directory: ./app/docker
        run: |
          # Set build-time environment variables
          export NEXT_PUBLIC_API_URL=http://localhost:${FASTAPI_PORT}/api
          export FASTAPI_INTERNAL_URL=http://localhost:${FASTAPI_PORT}
          
          docker compose up -d --build
          
          echo "Container status:"
          docker compose ps
          
          echo "Container logs:"
          docker compose logs

      - name: Check API health
        working-directory: ./app/docker
        run: |
          echo "Waiting for API to start..."
          for i in {1..12}; do
            if curl -s localhost:${FASTAPI_PORT}/health; then
              echo "API is up!"
              break
            fi
            echo "Attempt $i: API not ready yet..."
            docker compose logs api-service
            sleep 5
          done

      - name: Check Next.js health
        working-directory: ./app/docker
        run: |
          echo "Waiting for Next.js to start..."
          for i in {1..12}; do
            if curl -s localhost:${NEXTJS_PORT}; then
              echo "Next.js is up!"
              break
            fi
            echo "Attempt $i: Next.js not ready yet..."
            docker compose logs nextjs
            sleep 5
          done

      - name: Run tests
        working-directory: ./app/tests
        run: |
          if [ -d "playwright-report" ]; then
            rm -rf playwright-report
          fi
          npm ci
          npx playwright install --with-deps
          npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: app/tests/playwright-report
          retention-days: 30

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write  # Grant write permission to packages
      
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Build and push Redis image
        uses: docker/build-push-action@v5
        with:
          context: ./app/redis
          push: true
          tags: ghcr.io/${{ github.repository }}/redis:latest

      - name: Build and push API service image
        uses: docker/build-push-action@v5
        with:
          context: ./app/api-service
          push: true
          tags: ghcr.io/${{ github.repository }}/api-service:latest
          build-args: |
            ODA_API_BASE_URL="${{ secrets.ODA_API_BASE_URL }}"

      - name: Build and push Next.js image
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=http://dev.jacektessen.com:8060/api \
            --build-arg FASTAPI_INTERNAL_URL=http://dev.jacektessen.com:8060 \
            --build-arg API_URL=http://dev.jacektessen.com:8060 \
            --build-arg SKIP_BUILD_STATIC_GENERATION=true \
            -t ghcr.io/${{ github.repository }}/nextjs:latest \
            -f ./app/client/Dockerfile ./app/client
          docker push ghcr.io/${{ github.repository }}/nextjs:latest

  deploy:
    name: Deploy to Production
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create production .env file
        run: |
          cat << EOF > .env
          REDIS_PORT=6379
          REDIS_URL=redis://redis:6379
          FASTAPI_PORT=8060
          FASTAPI_INTERNAL_URL=http://api-service:8060
          FASTAPI_EXTERNAL_URL=http://dev.jacektessen.com:8060
          NEXTJS_PORT=3060
          NEXT_PUBLIC_API_URL=http://dev.jacektessen.com:8060/api
          ODA_API_BASE_URL=${{ secrets.ODA_API_BASE_URL }}
          EOF

      - name: Setup SSH and deploy
        env:
          DEPLOY_KEY: "${{ secrets.DEPLOY_KEY }}"
          DEPLOY_HOST: "${{ secrets.DEPLOY_HOST }}"
          DEPLOY_USER: "${{ secrets.DEPLOY_USERNAME }}"
          GITHUB_REPO: "${{ github.repository }}"
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          echo "Creating temporary docker-compose file with repository name..."
          sed "s|\${GITHUB_REPOSITORY}|${GITHUB_REPO}|g" app/docker/docker-compose.prod.yml > docker-compose.tmp.yml
          
          echo "Checking processed docker-compose file..."
          cat docker-compose.tmp.yml
          
          echo "Copying files..."
          scp -i ~/.ssh/deploy_key docker-compose.tmp.yml $DEPLOY_USER@$DEPLOY_HOST:/opt/oda-dashboard/docker-compose.yml
          scp -i ~/.ssh/deploy_key .env $DEPLOY_USER@$DEPLOY_HOST:/opt/oda-dashboard/
          
          echo "Verifying files on server..."
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST '
            cd /opt/oda-dashboard && \
            echo "Current directory content:" && \
            ls -la && \
            echo "Docker compose content:" && \
            cat docker-compose.yml && \
            echo "Environment file content:" && \
            cat .env && \
            echo "Starting deployment..." && \
            sudo docker compose pull && \
            sudo docker compose up -d'

      - name: Setup SSH and deploy
        env:
          DEPLOY_KEY: "${{ secrets.DEPLOY_KEY }}"
          DEPLOY_HOST: "${{ secrets.DEPLOY_HOST }}"
          DEPLOY_USER: "${{ secrets.DEPLOY_USERNAME }}"
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          echo "Copying files..."
          scp -i ~/.ssh/deploy_key docker-compose.prod.yml $DEPLOY_USER@$DEPLOY_HOST:/opt/oda-dashboard/docker-compose.yml
          scp -i ~/.ssh/deploy_key .env $DEPLOY_USER@$DEPLOY_HOST:/opt/oda-dashboard/
          
          echo "Deploying..."
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST '
            cd /opt/oda-dashboard && \
            echo "Current directory content:" && \
            ls -la && \
            echo "Environment file content:" && \
            cat .env && \
            echo "Starting deployment..." && \
            sudo docker compose pull && \
            sudo docker compose up -d'